package com.epam.javase.t01;

import org.junit.*;
import org.junit.Test;

import java.awt.*;
import java.util.regex.Pattern;

import static org.junit.Assert.*;

/**
 * Created by aivanov on 2/26/2017.
 */
public class PenTest {

    private final Pen penX = new Pen(Color.BLACK, 2.5, 0.75);
    private final Pen clone = new Pen(Color.BLACK, 2.5, 0.75);
    private final Pen other = new Pen(2.6, 1.75);

    @Test
    public void testEquals() throws Exception {

        final Pen penX = new Pen(Color.BLACK, 2.5, 0.75);
        final Pen penY = new Pen(Color.BLACK, 2.5, 0.75);
        final Pen penZ = new Pen(Color.BLACK, 2.5, 0.75);
        final Pen other = new Pen(2.6, 1.75);

        equalsCheckReflexivity(penX);
        equalsCheckSymmetry(penX, penY);
        equalsCheckTransitivity(penX, penY, penZ);
        equalsCheckConsistency(penX, penY);
        equalsCheckAgainstNull(penX);
        equalsCheckWithDifferentObject(penX, other);
    }

    private void equalsCheckConsistency(Pen penX, Pen penY) {
        assertTrue(penX.equals(penY));
        assertTrue(penX.equals(penY));
        assertTrue(penX.equals(penY));
    }

    private void equalsCheckTransitivity(Pen penX, Pen penY, Pen penZ) {
        assertTrue(penX.equals(penY));
        assertTrue(penY.equals(penZ));
        assertTrue(penX.equals(penZ));
    }

    private void equalsCheckAgainstNull(Pen pen) {
        assertFalse(pen.equals(null));
    }

    private void equalsCheckWithDifferentObject(Pen pen, Pen other) {
        assertFalse(pen.equals(other));
    }

    private void equalsCheckReflexivity(Pen pen) {
        assertTrue(pen.equals(pen));
    }

    private void equalsCheckSymmetry(Pen penX, Pen penY) {
        assertTrue(penX.equals(penY));
        assertTrue(penY.equals(penX));
    }

    @Test
    public void testHashCode() throws Exception {

        final Pen pen = new Pen(Color.BLACK, 2.5, 0.75);
        final Pen clone = new Pen(Color.BLACK, 2.5, 0.75);
        final Pen other = new Pen(2.6, 1.75);

        testHashCodeEqualityWithMyself(pen);
        testHashCodeEqualityWithClone(pen, clone);
        testHashCodeEqualityWithOther(pen, other);
    }

    private void testHashCodeEqualityWithOther(Pen pen, Pen other) {
        assertFalse(pen.hashCode() == other.hashCode());
    }

    private void testHashCodeEqualityWithClone(Pen pen, Pen clone) {
        assertTrue(pen.hashCode() == clone.hashCode());
    }

    private void testHashCodeEqualityWithMyself(Pen pen) {
        assertTrue(pen.hashCode() == pen.hashCode());
    }

    @Test
    public void testToString() throws Exception {

        String str = penX.toString();

        assertTrue(str.indexOf(penX.getColor().toString()) >= 0);
        assertTrue(str.indexOf(Double.toString(penX.getCost())) >= 0);
        assertTrue(str.indexOf(Double.toString(penX.getLineWidth())) >= 0);
    }
}